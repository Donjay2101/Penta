@model IEnumerable<DAH.ViewModel.UserView>

@using GridMvc.Html

@if (ViewBag.PendingUsers == true)
{
    <div class="row form-group">
        <div class="col-md-12">
            <span id="assignCustomerCode" style="cursor:pointer">Assgin Customer Codes</span>
        </div>  
    </div>
}
@Html.Grid(Model).Columns(columns =>
                    {
                        columns.Add()
               .Encoded(false)
               .Sanitized(false)
               .SetWidth(30)
               .Css("hidden-xs") //hide on phones
               .RenderValueAs(c =>
                @<div id="balloon" class="balloonClass">
                    <b>
                        @Html.ActionLink("Edit", "Edit", "User", new { id = c.ID }, new { @class = "modal_link" })
                    </b>
                </div>);
                        columns.Add()
                                   .Encoded(false)
                                   .Sanitized(false)
                                   .SetWidth(30)
                                   .Css("hidden-xs") //hide on phones
                                   .RenderValueAs(c =>
                                    @<div id="balloon" class="balloonClass">
                                        <b>
                                            @if (ViewBag.PendingUsers)
                                            {
                                                <a href="#" onclick="deleteConfirm('@c.ID','@c.ContactName','User','?option=0')">Delete</a>
                                            }
                                            else
                                            {
                                                <a href="#" onclick="deleteConfirm('@c.ID','@c.ContactName','User',)">Delete</a>
                                            }
                                            
                                            @*@Html.ActionLink("Delete", "Delete", new { id = c.ID }, new { @class = "modal_link" })*@
                                        </b>
                                    </div>);
                        columns.Add(c => c.ContactName).Titled("Contact Name").Filterable(true);
                        // columns.Add(c => c.Description).Titled("Description");
                        columns.Add(c => c.CustomerCode).Titled("Customer Code");
                        columns.Add(c => c.Address).Titled("Address");
                        columns.Add(c => c.City).Titled("City");
                        columns.Add(c => c.State).Titled("State");
                        columns.Add(c => c.Zip).Titled("Zip");

                    }).WithPaging(10).Sortable().Filterable().WithMultipleFilters()




